// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // A register
    Mux16(a=instruction, b=ALUout, sel=instruction[15], out=ain);
    Not(in=instruction[15], out=ainstructwriteA);
    And(a=instruction[15], b=instruction[5], out=cinstructwriteA);
    Or(a=ainstructwriteA, b=cinstructwriteA, out=writeA);
    ARegister(in=ain, load=writeA, out=Aout, out[0..14]=addressM, out=nextinstr);

    // D Register
    And(a=instruction[15], b=instruction[4], out=writeD);
    DRegister(in=ALUout, load=writeD, out=Dout);

    // ALU
    Mux16(a=Aout, b=inM, sel=instruction[12], out=ALUx);
    ALU(x=Dout, y=ALUx, zx=instruction[11], nx=instruction[10], zy=instruction[9], 
        ny=instruction[8], f=instruction[7], no=instruction[6], 
        out=outM, out=ALUout, zr=zr, ng=ng);

    // Write to Memory
    And(a=instruction[15], b=instruction[3], out=writeM);

    // Program Counter
    Or(a=zr, b=ng, out=ngorzr);
    Not(in=ngorzr, out=pos);
    And(a=instruction[2], b=ng, out=jng);
    And(a=instruction[1], b=zr, out=jzr);
    And(a=instruction[0], b=pos, out=jpos);
    Or(a=jng, b=jzr, out=j1j2);
    Or(a=j1j2, b=jpos, out=jmpC);
    And(a=jmpC, b=instruction[15], out=jmp);
    
    PC(in=nextinstr, load=jmp, inc=true, reset=reset, out[0..14]=pc);
    // I learned only after that I had already implemented a counter as PC.hdl, so the code below is without it:
    // Register(in=next, load=true, out=PCout, out[0..14]=pc);
    // Inc16(in=PCout, out=inc);
    // Mux16(a=inc, b=nextinstr, sel=jmp, out=nextaddr);
    // Mux16(a=nextaddr, b=false, sel=reset, out=next);
}